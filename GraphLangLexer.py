# Generated from GraphLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,59,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
        1,8,1,8,1,9,4,9,49,8,9,11,9,12,9,50,1,9,1,9,1,10,4,10,56,8,10,11,
        10,12,10,57,0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,1,0,2,3,0,9,10,13,13,32,32,1,0,48,57,60,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,1,0,
        0,0,3,27,1,0,0,0,5,33,1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,39,1,
        0,0,0,13,41,1,0,0,0,15,43,1,0,0,0,17,45,1,0,0,0,19,48,1,0,0,0,21,
        55,1,0,0,0,23,24,5,100,0,0,24,25,5,101,0,0,25,26,5,102,0,0,26,2,
        1,0,0,0,27,28,5,103,0,0,28,29,5,114,0,0,29,30,5,97,0,0,30,31,5,112,
        0,0,31,32,5,104,0,0,32,4,1,0,0,0,33,34,5,40,0,0,34,6,1,0,0,0,35,
        36,5,41,0,0,36,8,1,0,0,0,37,38,5,44,0,0,38,10,1,0,0,0,39,40,5,123,
        0,0,40,12,1,0,0,0,41,42,5,125,0,0,42,14,1,0,0,0,43,44,5,91,0,0,44,
        16,1,0,0,0,45,46,5,93,0,0,46,18,1,0,0,0,47,49,7,0,0,0,48,47,1,0,
        0,0,49,50,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,52,1,0,0,0,52,53,
        6,9,0,0,53,20,1,0,0,0,54,56,7,1,0,0,55,54,1,0,0,0,56,57,1,0,0,0,
        57,55,1,0,0,0,57,58,1,0,0,0,58,22,1,0,0,0,3,0,50,57,1,6,0,0
    ]

class GraphLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    WS = 10
    INT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'graph'", "'('", "')'", "','", "'{'", "'}'", "'['", 
            "']'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "INT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "WS", "INT" ]

    grammarFileName = "GraphLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


